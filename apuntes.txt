git status -- para ver el estado

git rm [nombre del arcivo]
(usa --cached para conservar el archivo, 
o -f para forzar su eliminación)

git rm --cached historia.txt

git -f [nombre del archivo]
Elimina en archivo 

commit
git commit -m "descripción del commit"

Configurando git

git config  >>  con este comando puedo ver las configuraciones de git

git config --list >> configuraciones de la cuenta

git config --list --show-origin >> donde estan las configuraciones guardadas

git config --global user.name "nombre de la cuenta"

git config --global user.email "soporte@allnexus.com.co"

cat historia.txt >> con esto puedo ver el contenido del archivo pero no modificarlo

git add . >> añado todos los arcivos . es mi carpeta raiz

git log >> hitorial del commits

git show [nombre del archivo] >> para ver los cambios que hay sobre el archivo

git diff 97a6baba15babe415bab72e920fc73e77fbab929

Volver en el tiempo en nuestro repositorio utilizando branches y checkout

con git diff 
puedo ver lo que tengo en el disco duro y lo que esta en stagin

para moverse entre el tiempo, con esto puedo arreglar un archivo en particular de un commit
git checkout [numero del commit] [nombre del archivo]

git checkout 97a6baba15babe415bab72e920fc73e77fbab929  >> con esto regresan todos los archivos del commit

git checkout master 97a6baba15babe415bab72e920fc73e77fbab929 historia.txt  >> con esto regresamos el archivo en particular
que deseamos arreglar

despues podemos hacer un commit con el cual actualizamos el archivo en head

git log --stat  >> puedo ver los bites que cambiaron entre commits


Git reset y git rm son comandos con utilidades muy diferentes, pero aún así se confunden muy fácilmente.

git rm
Este comando nos ayuda a eliminar archivos de Git sin eliminar su historial del sistema de versiones. Esto quiere decir que si necesitamos recuperar el archivo solo debemos “viajar en el tiempo” y recuperar el último commit antes de borrar el archivo en cuestión.

Recuerda que git rm no puede usarse así nomás. Debemos usar uno de los flags para indicarle a Git cómo eliminar los archivos que ya no necesitamos en la última versión del proyecto:

git rm --cached: Elimina los archivos del área de Staging y del próximo commit pero los mantiene en nuestro disco duro.
git rm --force: Elimina los archivos de Git y del disco duro. Git siempre guarda todo, por lo que podemos acceder al registro de la existencia de los archivos, de modo que podremos recuperarlos si es necesario (pero debemos usar comandos más avanzados).
git reset
Este comando nos ayuda a volver en el tiempo. Pero no como git checkout que nos deja ir, mirar, pasear y volver. Con git reset volvemos al pasado sin la posibilidad de volver al futuro. Borramos la historia y la debemos sobreescribir. No hay vuelta atrás.

Este comando es muy peligroso y debemos usarlo solo en caso de emergencia. Recuerda que debemos usar alguna de estas dos opciones:

Hay dos formas de usar git reset: con el argumento --hard, borrando toda la información que tengamos en el área de staging (y perdiendo todo para siempre). O, un poco más seguro, con el argumento --soft, que mantiene allí los archivos del área de staging para que podamos aplicar nuestros últimos cambios pero desde un commit anterior.

git reset --soft: Borramos todo el historial y los registros de Git pero guardamos los cambios que tengamos en Staging, así podemos aplicar las últimas actualizaciones a un nuevo commit.
git reset --hard: Borra todo. Todo todito, absolutamente todo. Toda la información de los commits y del área de staging se borra del historial.
¡Pero todavía falta algo!

git reset HEAD: Este es el comando para sacar archivos del área de Staging. No para borrarlos ni nada de eso, solo para que los últimos cambios de estos archivos no se envíen al último commit, a menos que cambiemos de opinión y los incluyamos de nuevo en staging con git add, por supuesto.
¿Por que esto es importante?
Imagina el siguiente caso:

Hacemos cambios en los archivos de un proyecto para una nueva actualización. Todos los archivos con cambios se mueven al área de staging con el comando git add. Pero te das cuenta de que uno de esos archivos no está listo todavía. Actualizaste el archivo pero ese cambio no debe ir en el próximo commit por ahora.

¿Qué podemos hacer?

Bueno, todos los cambios están en el área de Staging, incluido el archivo con los cambios que no están listos. Esto significa que debemos sacar ese archivo de Staging para poder hacer commit de todos los demás.

¡Al usar git rm lo que haremos será eliminar este archivo completamente de git! Todavía tendremos el historial de cambios de este archivo, con la eliminación del archivo como su última actualización. Recuerda que en este caso no buscábamos eliminar un archivo, solo dejarlo como estaba y actualizarlo después, no en este commit.

En cambio, si usamos git reset HEAD, lo único que haremos será mover estos cambios de Staging a Unstaged. Seguiremos teniendo los últimos cambios del archivo, el repositorio mantendrá el archivo (no con sus últimos cambios pero sí con los últimos en los que hicimos commit) y no habremos perdido nada.

Conclusión: Lo mejor que puedes hacer para salvar tu puesto y evitar un incendio en tu trabajo es conocer muy bien la diferencia y los riesgos de todos los comandos de Git.


Las ramas son la forma de hacer cambios en nuestro proyecto sin afectar el flujo de trabajo de la rama principal. Esto porque queremos trabajar una parte muy específica de la aplicación o simplemente experimentar.

La cabecera o HEAD representan la rama y el commit de esa rama donde estamos trabajando. Por defecto, esta cabecera aparecerá en el último commit de nuestra rama principal. Pero podemos cambiarlo al crear una rama (git branch rama, git checkout -b rama) o movernos en el tiempo a cualquier otro commit de cualquier otra rama con los comandos (git reset id-commit, git checkout rama-o-id-commit).

RAMAS

con git show puedo ver en que rama estoy y a donde a punta el HEAD

git branch [nombre de la rama] >>> para crear una rama

git show
commit e4ce8916dfbe78649dc684b321e1b3f3a273d3ea (HEAD -> master, cabecera)
tengo el HEAD apuntando a master y a cabecera

PAGINA PARA HACER CSS
https://www.cssmatic.com/

El comando git merge nos permite crear un nuevo commit con la combinación de dos ramas (la rama donde nos encontramos cuando ejecutamos el comando y la rama que indiquemos después del comando).

# Crear un nuevo commit en la rama master combinando
# los cambios de la rama cabecera:
git checkout master
git merge cabecera

# Crear un nuevo commit en la rama cabecera combinando
# los cambios de cualquier otra rama:
git checkout cabecera
git merge cualquier-otra-rama

Git nunca borra nada a menos que nosotros se lo indiquemos. 
Cuando usamos los comandos git merge o git checkout estamos cambiando de rama o creando un nuevo commit, 

no borrando ramas ni commits (recuerda que puedes borrar commits con git reset y ramas con git branch -d).

1. creamos un nuevo repositorio en GITHUB
2. git remote add origin <url_repositorio>
3. git pull <remoto> <rama> <<<<>>>> git pull origin master  >>> para bajar cambios de GITHUB
4. si no funciona  los forzamos con: git pull origin master --allow-unrelated-histories
5. empujamos los cambios al GITHUB git push origin master

Respuesta a:
Cómo funcionan las llaves públicas y privadas
Llaves públicas y privadas
o Cifrado asimétrico de un sólo camino

Sirve para mandar mensajes privados entre varios nodos con la lógica de que firmas tu mensaje
con una llave pública vinculada con una llave privada que puede leer el mensaje.

El flujo es:

Creas una llave pública y una llave privada (ambas están vinculadas)
Cifras el mensaje con la llave pública (puede ser llave de otra persona)
Envías el mensaje
El receptor, al tener la llave privada puede descifrar el mensaje.
Este algoritmo es completamente seguro, así es cómo se mandan las comunicaciones en bancos,
la comunicación entre servidores o las firmas electrónicas.


SSH o Secure Shell: Es un protocolo de red que permite acceso remoto seguro a través de una conexión encriptada. Este método de autenticación requiere un passphrase (contraseña) o tambien puede funcionar sin passphrase sobre la clave.
.
En el directorio Home ~

$ git config -l: Muestra la configuración dentro de Git(user y email), Este comando funciona por que Git esta instalado en todo el equipo local.
.
$ git config --global user.email “nombre_email_cambiado” : Se puede utilizar este mismo comando para cambiar el email.
.
Creamos la llave SSH


>>>>>>>>>>>>>>>   $ ssh-keygen -t rsa -b4096 -C "tu_email@gmail.com"

-t = Especifica cual es el algoritmo que vamos a usar para crear esa llave.
rsa = Algoritmo a usar, hasta el momento el mas popular.
-b = Especifica que tan compleja es la llave.
4096 = Complejidad de la llave desde una perspectiva matemática.
-C = Indica a que correo electrónico va estar conectado esta llave
"tu_email@gmail.com" = Correo electrónico.
.
Dato: Guardar la llave en la dirección predeterminada.
Dato2: Passphrase: Password con espacios o Contraseña adicional de texto que le vas a poner a tu llave pública y privada.
.
1er Paso:
Una ves que tengamos la llave, tenemos que agregarlo al entorno, y el entorno es básicamente que el sistema operativo donde tu trabajas sepa que la llave existe. Para ello ejecutamos lo sgte:
.
revisar el servidor de llaves / Evalúa que un comando se dispare.

>>>>>>>>>>>>>>>>>>>>>>>>> $ eval $(ssh-agent -s)
Dato: Agent pid 4724

Agent = Significa que el servidor de SHH esta corriendo.
pid = Process id o identificador del proceso.
4724 = Número que al sistema operativo le dice que el proceso esta corriendo.
.
2do Paso:

Agregamos la llave privada a nuestro sistema o al servidor por que no basta con que la llave solo exista, sino debemos decirle que existe. Para ello ejecutamos el siguiente comando:

$ ssh-add ~/.ssh/id_rsa
~ = Home
.ssh = carpeta ssh
id_rsa = llave privada la que nunca debemos de mostrar.

Para copiar la llave publica y pegarla en el SSH Keys de GITHUB utilizamos

cat ~/.ssh/id_rsa.pub

y despues copiamos el resultado y lo pegamos en GITHUB.

VERIFICAR LA CONEXION CON EL EQUIPO QUE SEA SSH
1. git remote -v

origin	https://github.com/lenninIbarrraGonzalez/Gitprofesional.git (fetch)
origin	https://github.com/lenninIbarrraGonzalez/Gitprofesional.git (push)

2. copiar la ruta con ssh desde GITHUB

git remote -set-url origin git@github.com:lenninIbarrraGonzalez/Gitprofesional.git

3. verificamos el cambio

git remote -v
origin	git@github.com:lenninIbarrraGonzalez/Gitprofesional.git (fetch)
origin	git@github.com:lenninIbarrraGonzalez/Gitprofesional.git (push)

comandos para manejar ramas

git branch [nombre de la rama]  <<< para crear una rama

git checkout [nombre de la rama] para moverse entre las ramas

git branch para ver las ramas 

git show-branch  <<<<< permite ver las ramas 
git show-branch --all

gitk >> abre una version grafica 


Por defecto, cualquier persona puede clonar o descargar tu proyecto desde GitHub, pero no pueden crear commits, ni ramas, ni nada.

Existen varias formas de solucionar esto para poder aceptar contribuciones. Una de ellas es añadir a cada persona de nuestro equipo como colaborador de nuestro repositorio.

Solo debemos entrar a la configuración de colaboradores de nuestro proyecto (Repositorio > Settings > Collaborators) y añadir el email o username de los nuevos colaboradores.

Git Rebase: Reorganizando el trabajo realizado
El comando rebase es una mala práctica, nunca se debe usar.
Con rebase puedes recoger todos los cambios confirmados en una rama y ponerlos sobre otra.

# Cambiamos a la rama que queremos traer los cambios
git checkout experiment
# Aplicamos rebase para traer los cambios de la rama que queremos 
git rebase master





Ignorar archivos para no subirlos al repositorio (.gitignore)
Por diversas razones, no todos los archivos que agregas a un proyecto deberían guardarse en un repositorio, ésto porque hay archivos que no todo el mundo
debería de ver, y hay archivos que al estar en el repositorio alentan el proceso de desarrollo (por ejemplo los binary large objects, blob, que se tardan
en descargarse).
.
Para que no se suban estos archivos no deseados se puede crear un archivo con el nombre .gitignore en la raíz del repositorio con las reglas para los archivos
que no se deberían subir (ver [sintaxis de los .gitignore(https://git-scm.com/docs/gitignore)).
.
Las razones principales para tomar la decisión de no agregar un archivo a un repositorio son:
.
Es un archivo con contraseñas (normalmente con la extensión .env)
Es un blob (binary large object, objeto binario grande), mismos que son difíciles de gestionar en git.
Son archivos que se generan corriendo comandos, por ejemplo la carpeta node_modules que genera npm al correr el comando npm install

Respuesta a:
Readme.md es una excelente práctica
Readme.md y markdown
README.md es el lugar dónde se explica de qué trata el proyecto, cómo utilizarlo y demás información que se considere que se deba conocer antes de utilizar
un proyecto.
.
Los archivos README son escritos en un lenguaje llamado markdown, por eso la extensión .md, mismo que es un estándar de escritura en diversos sitios
 (como platzi, como wikipedia y obvio GitHub), ver reglas de markdown.
.
Los README.md pueden estar en todas las carpetas, pero el más importante es el que se encuentra en la raíz y ayudan a que los colaboradores sepan información
 importante del proyecto, módulo o sección, puedes crear cualquier cualquier archivo con la extensión .md pero sólo losn README.md los mostrará por defecto
  GitHub.